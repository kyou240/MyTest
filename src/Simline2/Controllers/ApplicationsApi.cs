/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Simline2.Attributes;
using Simline2.Models;

namespace Simline2.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ApplicationsApiController : ControllerBase
    { 
        /// <summary>
        /// 処理状況照会
        /// </summary>
        /// <remarks>申請案件の処理状況を照会する。一度に問い合わせ可能な申請案件の数は1,000である。補正申請の受付年月日を取得する場合は、初回申請番号を指定すること。（※初回申請番号：補正申請を作成する際に、構成管理情報に設定する、補正元申請の申請番号。） </remarks>
        /// <param name="retrieveShoriJokyoRequest">処理状況照会リクエストを設定する。</param>
        /// <response code="200">リクエストより取得した申請番号を元に処理を実施し正常終了した申請番号について、取得した処理状況を処理状況照会レスポンスに設定し返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/retrieve_shori_jokyo.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsRetrieveShoriJokyoJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(RetrieveShoriJokyoResponse), description: "リクエストより取得した申請番号を元に処理を実施し正常終了した申請番号について、取得した処理状況を処理状況照会レスポンスに設定し返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult ApplicationsRetrieveShoriJokyoJsonPost([FromBody]RetrieveShoriJokyoRequest retrieveShoriJokyoRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RetrieveShoriJokyoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"tsusu\" : 1,\r\n    \"uketsukeNengappi\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\",\r\n    \"shoriJokyo\" : 6,\r\n    \"nofuJokyo\" : 0\r\n  }, {\r\n    \"tsusu\" : 1,\r\n    \"uketsukeNengappi\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\",\r\n    \"shoriJokyo\" : 6,\r\n    \"nofuJokyo\" : 0\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RetrieveShoriJokyoResponse>(exampleJson)
            : default(RetrieveShoriJokyoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 連件意思確定
        /// </summary>
        /// <remarks>連件の申請案件の確定又は取下げを行う。 </remarks>
        /// <param name="shinseiBango">申請番号。連件申請案件送信の戻り値であるshinseiBangoの一番若い番号を設定する。</param>
        /// <param name="confirmRenkenRequest">連件意思確定リクエストを設定する。</param>
        /// <response code="200">処理が終了した場合に、連件意識確定レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合等に存在エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/{shinseiBango}/confirm_renken.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoConfirmRenkenJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConfirmRenkenResponse), description: "処理が終了した場合に、連件意識確定レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoConfirmRenkenJsonPost([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango, [FromBody]ConfirmRenkenRequest confirmRenkenRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConfirmRenkenResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"result\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConfirmRenkenResponse>(exampleJson)
            : default(ConfirmRenkenResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 納付情報暗号化
        /// </summary>
        /// <remarks>納付情報を暗号化する。暗号化した納付情報は、電子納付情報WEBサイトとの連携におけるパラメータとして使用する。詳細については、アプリケーション仕様編「4.4　電子納付情報WEBサイトとの連携」を参照。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <param name="encryptNofuJohoRequest">納付情報暗号化リクエストを設定する。</param>
        /// <response code="200">リクエストから取得した納付番号と確認番号を元に処理を実施し、正常終了した場合、納付情報暗号化レスポンスを返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合に存在エラーを返却する。  また、納付番号・確認番号がない場合等も存在エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/{shinseiBango}/encrypt_nofu_joho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoEncryptNofuJohoJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(EncryptNofuJohoResponse), description: "リクエストから取得した納付番号と確認番号を元に処理を実施し、正常終了した場合、納付情報暗号化レスポンスを返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合に存在エラーを返却する。  また、納付番号・確認番号がない場合等も存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoEncryptNofuJohoJsonPost([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango, [FromBody]EncryptNofuJohoRequest encryptNofuJohoRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EncryptNofuJohoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"nofuNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"encryptedNofuJoho\" : \"encryptedNofuJoho\",\r\n  \"nofuJokyo\" : 1\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EncryptNofuJohoResponse>(exampleJson)
            : default(EncryptNofuJohoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 受領通知取得
        /// </summary>
        /// <remarks>受領通知を取得する。補正申請の受領通知を取得する場合は、初回申請番号を指定すること。（※初回申請番号：補正申請を作成する際に、構成管理情報に設定する、補正元申請の申請番号。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を実施し正常終了した場合、受領通知取得レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合、申請案件に受領通知がない場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/juryo_joho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoJuryoJohoJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(JuryoJohoResponse), description: "Parametersから取得した申請番号を元に処理を実施し正常終了した場合、受領通知取得レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合、申請案件に受領通知がない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoJuryoJohoJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(JuryoJohoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"shogyoHojinKubun\" : \"9\",\r\n  \"uketsukeBangos\" : [ {\r\n    \"edaban1\" : \"12\",\r\n    \"edaban2\" : \"12\",\r\n    \"homban\" : \"123456\"\r\n  }, {\r\n    \"edaban1\" : \"12\",\r\n    \"edaban2\" : \"12\",\r\n    \"homban\" : \"123456\"\r\n  } ],\r\n  \"juryoTsuchi\" : \"<center><table width=\\\"100%\\\" align=\\\"CENTER\\\" border=\\\"0\\\" cellspacing=\\\"10\\\"><tbody><tr><td align=\\\"CENTER\\\"><h1>受付のお知らせ</h1></td></tr></tbody></table><hr /></center>\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<JuryoJohoResponse>(exampleJson)
            : default(JuryoJohoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 手続終了
        /// </summary>
        /// <remarks>公文書の受領を登記・供託オンライン申請システムに通知し、手続を終了する。公文書を受領した場合は直ちに本処理を実行すること（不動産の登記識別情報通知ダウンロード様式を別途送信する必要がある手続を除く）。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を行い処理が終了した場合に、手続終了レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合や公文書がない場合等に存在エラーを返却する。 </response>
        [HttpDelete]
        [Route("/rs/api/v1/applications/{shinseiBango}/kobunsho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoKobunshoJsonDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(KobunshoDeleteResponse), description: "Parametersから取得した申請番号を元に処理を行い処理が終了した場合に、手続終了レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合や公文書がない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoKobunshoJsonDelete([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KobunshoDeleteResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"status\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KobunshoDeleteResponse>(exampleJson)
            : default(KobunshoDeleteResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 公文書取得
        /// </summary>
        /// <remarks>公文書を取得する。一度本処理で公文書の取得に成功した場合は、再度同一申請番号で本処理を呼ばないよう制御すること。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersより取得した申請番号を元に処理を実施し、正常終了した場合、公文書取得レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合や公文書がない場合に存在エラーを返却する。  また、公文書取得期限を過ぎている場合も存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/kobunsho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoKobunshoJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(KobunshoResponse), description: "Parametersより取得した申請番号を元に処理を実施し、正常終了した場合、公文書取得レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合や公文書がない場合に存在エラーを返却する。  また、公文書取得期限を過ぎている場合も存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoKobunshoJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KobunshoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"result\" : \"result\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KobunshoResponse>(exampleJson)
            : default(KobunshoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 登記識別情報通知・未失効回答取得済通知
        /// </summary>
        /// <remarks>登記識別情報通知・未失効照会の手続において、登記識別情報通知・未失効回答のお知らせの受領を登記・供託オンライン申請システムに通知し、手続を終了する。登記識別情報通知・未失効回答取得のお知らせの取得に成功した場合のみ本処理を実行すること。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を行い処理が終了した場合に、登記識別情報通知・未失効回答取得済み通知レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合又は申請案件の手続IDが登記識別情報通知・未失効照会以外の場合等に存在エラーを返却する。 </response>
        [HttpDelete]
        [Route("/rs/api/v1/applications/{shinseiBango}/mishikkou.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoMishikkouJsonDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(MishikkouDeleteResponse), description: "Parametersから取得した申請番号を元に処理を行い処理が終了した場合に、登記識別情報通知・未失効回答取得済み通知レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合又は申請案件の手続IDが登記識別情報通知・未失効照会以外の場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoMishikkouJsonDelete([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MishikkouDeleteResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"status\" : true\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MishikkouDeleteResponse>(exampleJson)
            : default(MishikkouDeleteResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 登記識別情報通知・未失効回答取得
        /// </summary>
        /// <remarks>登記識別情報通知・未失効照会の手続において、登記識別情報通知・未失効回答のお知らせを取得する。また、正常に登記識別情報通知・未失効回答のお知らせの取得に成功した場合は、直ちに登記識別情報通知・未失効回答取得済通知を行うこと。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を実施し、正常終了した場合、登記識別情報通知・未失効回答取得レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合や申請案件の手続IDが登記識別情報通知・未失効照会以外の場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/mishikkou.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoMishikkouJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MishikkouResponse), description: "Parametersから取得した申請番号を元に処理を実施し、正常終了した場合、登記識別情報通知・未失効回答取得レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合や申請案件の手続IDが登記識別情報通知・未失効照会以外の場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoMishikkouJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MishikkouResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"oshiraseNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"oshiraseKubun\" : 3,\r\n  \"oshiraseNaiyo\" : \"お知らせ内容\",\r\n  \"tempuFileUmu\" : false\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MishikkouResponse>(exampleJson)
            : default(MishikkouResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 納付情報取得
        /// </summary>
        /// <remarks>納付情報を取得する。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を実施し正常終了した場合、納付情報取得レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合や処理状況照会にて返却値nofuJokyoがnullの申請案件に対して本処理を実施した場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/nofu_joho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoNofuJohoJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NofuJohoResponse), description: "Parametersから取得した申請番号を元に処理を実施し正常終了した場合、納付情報取得レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合や処理状況照会にて返却値nofuJokyoがnullの申請案件に対して本処理を実施した場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoNofuJohoJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NofuJohoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"kakuninBango\" : \"123456\",\r\n    \"nofuGaku\" : 500,\r\n    \"shunoKikanBango\" : \"00100\",\r\n    \"nofuKikanSaishuNengappi\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuJohoHakkoNichiji\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuNichiji\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuBango\" : \"1234567890123456    \",\r\n    \"nofuJokyo\" : 0\r\n  }, {\r\n    \"kakuninBango\" : \"123456\",\r\n    \"nofuGaku\" : 500,\r\n    \"shunoKikanBango\" : \"00100\",\r\n    \"nofuKikanSaishuNengappi\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuJohoHakkoNichiji\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuNichiji\" : \"2019-05-21T00:00:00+09:00\",\r\n    \"nofuBango\" : \"1234567890123456    \",\r\n    \"nofuJokyo\" : 0\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NofuJohoResponse>(exampleJson)
            : default(NofuJohoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// お知らせ取得
        /// </summary>
        /// <remarks>お知らせを取得する。登記識別情報通知・未失効回答のお知らせの取得は、登記識別情報通知・未失効回答取得で行う。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <param name="oshiraseTsuban">お知らせ通番。処理状況照会で取得したお知らせ通数を元に、取得したいお知らせの番号を指定する。</param>
        /// <response code="200">Parametersから取得した申請番号と、お知らせ通番を元に処理を実施し正常終了した場合、取得したお知らせ取得レスポンスを返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合やお知らせがない場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/oshirase/{oshiraseTsuban}.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoOshiraseOshiraseTsubanJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(OshiraseResponse), description: "Parametersから取得した申請番号と、お知らせ通番を元に処理を実施し正常終了した場合、取得したお知らせ取得レスポンスを返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合やお知らせがない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoOshiraseOshiraseTsubanJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango, [FromRoute][Required]int? oshiraseTsuban)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OshiraseResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"oshiraseNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"oshiraseKubun\" : 1,\r\n  \"oshiraseNaiyo\" : \"お知らせ内容\",\r\n  \"tempuFileUmu\" : false\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OshiraseResponse>(exampleJson)
            : default(OshiraseResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// お知らせ添付ファイル取得
        /// </summary>
        /// <remarks>お知らせ情報に添付されたファイルを取得する。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <param name="oshiraseTsuban">お知らせ通番。処理状況照会で取得したお知らせ通数を元に、取得したいお知らせの番号を指定する。</param>
        /// <response code="200">Parametersから取得した申請番号と、お知らせ通番を元に処理を実施し正常終了した場合、取得したお知らせ添付ファイル取得レスポンスを返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合やお知らせがない場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/oshirase_tempu/{oshiraseTsuban}.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoOshiraseTempuOshiraseTsubanJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(OshiraseTempuResponse), description: "Parametersから取得した申請番号と、お知らせ通番を元に処理を実施し正常終了した場合、取得したお知らせ添付ファイル取得レスポンスを返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合やお知らせがない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoOshiraseTempuOshiraseTsubanJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango, [FromRoute][Required]int? oshiraseTsuban)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OshiraseTempuResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"result\" : \"result\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OshiraseTempuResponse>(exampleJson)
            : default(OshiraseTempuResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 到達通知取得
        /// </summary>
        /// <remarks>申請案件の到達通知を取得する。 </remarks>
        /// <param name="shinseiBango">申請番号</param>
        /// <response code="200">Parametersから取得した申請番号を元に処理を実施し正常終了した場合に、到達通知取得レスポンスを返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        /// <response code="404">指定された申請番号の申請案件がない場合等に存在エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/applications/{shinseiBango}/totatsu_joho.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsShinseiBangoTotatsuJohoJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(TotatsuJohoResponse), description: "Parametersから取得した申請番号を元に処理を実施し正常終了した場合に、到達通知取得レスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        [SwaggerResponse(statusCode: 404, type: typeof(HTTP404), description: "指定された申請番号の申請案件がない場合等に存在エラーを返却する。 ")]
        public virtual IActionResult ApplicationsShinseiBangoTotatsuJohoJsonGet([FromRoute][Required][RegularExpression("^[0-9]{17}$")]string shinseiBango)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TotatsuJohoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(HTTP404));
            string exampleJson = null;
            exampleJson = "{\r\n  \"totatsuNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"totatsuTsuchi\" : \"totatsuTsuchi\",\r\n  \"uketsukeKekka\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TotatsuJohoResponse>(exampleJson)
            : default(TotatsuJohoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 同時申請案件送信
        /// </summary>
        /// <remarks>同時申請を行う。1回の送信で同時申請対象の申請案件を1件ずつ送信する。同時申請対象の全ての申請案件がそろった段階で全ての申請案件の登録を行う。途中で1つでもエラーがあった場合、関連する全ての申請案件が破棄される。1つの同時申請については、同時申請対象の全ての申請を同時申請案件送信により連続して送信する必要がある。同時申請対象の全ての申請が終了するか、エラーが起こるまで、別の同時申請についての同時申請案件送信、単独申請案件送信又は連件申請案件送信を行わないこと。 </remarks>
        /// <param name="submitDoujiRequest">同時申請送信リクエストを設定する。</param>
        /// <response code="200">処理が正常終了し、受信したリクエストの\&quot;seq\&quot;と\&quot;total\&quot;の値が一致していない場合、同時申請送信レスポンスにデータを設定せずに返却する。   処理が正常終了し、受信したリクエストの\&quot;seq\&quot;と\&quot;total\&quot;の値が一致している場合、同時申請送信レスポンスに申請された件数だけデータを設定し返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等に同時申請送信エラーレスポンスを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/submit_douji.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsSubmitDoujiJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmitDoujiResponse), description: "処理が正常終了し、受信したリクエストの\\&quot;seq\\&quot;と\\&quot;total\\&quot;の値が一致していない場合、同時申請送信レスポンスにデータを設定せずに返却する。   処理が正常終了し、受信したリクエストの\\&quot;seq\\&quot;と\\&quot;total\\&quot;の値が一致している場合、同時申請送信レスポンスに申請された件数だけデータを設定し返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(SubmitDoujiErrorResponse), description: "パラメータに誤りがある場合等に同時申請送信エラーレスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult ApplicationsSubmitDoujiJsonPost([FromBody]SubmitDoujiRequest submitDoujiRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmitDoujiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(SubmitDoujiErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\"\r\n  }, {\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SubmitDoujiResponse>(exampleJson)
            : default(SubmitDoujiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 連件申請案件送信
        /// </summary>
        /// <remarks>連件申請を行う。1回の送信で申請案件を1件ずつ送信する。連件申請の全ての申請案件がそろった段階で全ての申請案件の登録を行う。途中で1つでもエラーがあった場合、関連する全ての申請案件が破棄される。1つの連件については、全ての申請を連件申請案件送信により連続して送信する必要がある。1つの連件の申請が全て終了するか、エラーが起こるまで、別の連件についての連件申請案件送信、単独申請案件送信又は同時申請案件送信を行わないこと。 </remarks>
        /// <param name="submitRenkenRequest">連件申請送信リクエストを設定する。</param>
        /// <response code="200">処理が正常終了し、受信したリクエストの\&quot;seq\&quot;と\&quot;total\&quot;の値が一致していない場合、連件申請送信レスポンスにデータを設定せずに返却する。  処理が正常終了し、受信したリクエストの\&quot;seq\&quot;と\&quot;total\&quot;の値が一致している場合、連件申請送信レスポンスに申請された件数だけデータを設定し返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等に連件申請送信エラーレスポンスを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/submit_renken.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsSubmitRenkenJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmitRenkenResponse), description: "処理が正常終了し、受信したリクエストの\\&quot;seq\\&quot;と\\&quot;total\\&quot;の値が一致していない場合、連件申請送信レスポンスにデータを設定せずに返却する。  処理が正常終了し、受信したリクエストの\\&quot;seq\\&quot;と\\&quot;total\\&quot;の値が一致している場合、連件申請送信レスポンスに申請された件数だけデータを設定し返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(SubmitRenkenErrorResponse), description: "パラメータに誤りがある場合等に連件申請送信エラーレスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult ApplicationsSubmitRenkenJsonPost([FromBody]SubmitRenkenRequest submitRenkenRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmitRenkenResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(SubmitRenkenErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"results\" : [ {\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\"\r\n  }, {\r\n    \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n    \"shinseiBango\" : \"20190521115801001\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SubmitRenkenResponse>(exampleJson)
            : default(SubmitRenkenResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 単独申請案件送信
        /// </summary>
        /// <remarks>単独申請を行う。</remarks>
        /// <param name="submitTandokuRequest">単独申請送信リクエストを設定する。</param>
        /// <response code="200">正常に処理終了した場合に単独申請送信レスポンスを返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等に単独申請送信エラーレスポンスを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/applications/submit_tandoku.json")]
        [ValidateModelState]
        [SwaggerOperation("ApplicationsSubmitTandokuJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubmitTandokuResponse), description: "正常に処理終了した場合に単独申請送信レスポンスを返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(SubmitTandokuErrorResponse), description: "パラメータに誤りがある場合等に単独申請送信エラーレスポンスを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult ApplicationsSubmitTandokuJsonPost([FromBody]SubmitTandokuRequest submitTandokuRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubmitTandokuResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(SubmitTandokuErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"saishuKoshinNichiji\" : \"2019-05-21T10:44:15.111+09:00\",\r\n  \"shinseiBango\" : \"20190521115801001\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SubmitTandokuResponse>(exampleJson)
            : default(SubmitTandokuResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
