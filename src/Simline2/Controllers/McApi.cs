/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Simline2.Attributes;
using Simline2.Models;

namespace Simline2.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class McApiController : ControllerBase
    { 
        /// <summary>
        /// 漢字検索（戸籍統一文字用コード検索）
        /// </summary>
        /// <remarks>戸籍統一文字コード及び諸橋大漢和辞典コードによる戸籍統一文字の漢字文字画像検索を行う。</remarks>
        /// <param name="charset">文字コードセット（0:諸橋大漢和辞典、1:戸籍統一文字）。</param>
        /// <param name="code">文字コード。指定したコードが存在しない場合、検索結果は０件となる。</param>
        /// <response code="200">Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を戸籍統一文字検索レスポンスに設定し返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/mc/koseki/code.json")]
        [ValidateModelState]
        [SwaggerOperation("McKosekiCodeJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CharacterKosekiResponse), description: "Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を戸籍統一文字検索レスポンスに設定し返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult McKosekiCodeJsonGet([FromQuery][Required()][Range(0, 1)]int? charset, [FromQuery][Required()][RegularExpression("^([0-9]{6}|[0-9]{1,5}(-[12])?)$")]string code)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CharacterKosekiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"unlimitedRecordCount\" : 1,\r\n  \"characterInfos\" : [ {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"kakusus\" : \"4\"\r\n  }, {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"kakusus\" : \"4\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CharacterKosekiResponse>(exampleJson)
            : default(CharacterKosekiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 漢字検索（戸籍統一文字用読み方検索）
        /// </summary>
        /// <remarks>読み方による戸籍統一文字の漢字文字画像検索を行う。 </remarks>
        /// <param name="kakusuMargin">kakusuに指定した画数の±１画を検索対象とするかのフラグ。検索対象とする場合は“true”、検索対象としない場合は“false”を設定する。※kakusuが未設定の場合でも、必ず“true”か“false”を設定すること。</param>
        /// <param name="yomi1">漢字の読み方１。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomi2">漢字の読み方２。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomi3">漢字の読み方３。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomisOperant">読み方１～３の検索条件を指定する。設定可能な演算子は、“AND”又は“OR”（半角大文字）のいずれかとする。未指定の場合、“OR”を指定した場合と同様となる。</param>
        /// <param name="kakusu">漢字の画数。</param>
        /// <param name="radicalGroupCode">漢字の部首グループコード。部首グループコードについては「【付録】部首グループコード一覧」を参照</param>
        /// <response code="200">Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を戸籍統一文字検索レスポンスに設定し返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/mc/koseki/yomi.json")]
        [ValidateModelState]
        [SwaggerOperation("McKosekiYomiJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CharacterKosekiResponse), description: "Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を戸籍統一文字検索レスポンスに設定し返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult McKosekiYomiJsonGet([FromQuery][Required()]bool? kakusuMargin, [FromQuery]string yomi1, [FromQuery]string yomi2, [FromQuery]string yomi3, [FromQuery][RegularExpression("^AND$|^OR$")]string yomisOperant, [FromQuery][RegularExpression("^[0-9]+$")]string kakusu, [FromQuery][RegularExpression("^[0-9]{3}$")]string radicalGroupCode)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CharacterKosekiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"unlimitedRecordCount\" : 1,\r\n  \"characterInfos\" : [ {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"kakusus\" : \"4\"\r\n  }, {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"kakusus\" : \"4\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CharacterKosekiResponse>(exampleJson)
            : default(CharacterKosekiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 漢字検索（登記統一文字用コード検索）
        /// </summary>
        /// <remarks>戸籍統一文字コード及び諸橋大漢和辞典コードによる登記統一文字の漢字文字画像検索を行う。</remarks>
        /// <param name="charset">文字コードセット（0:諸橋大漢和辞典、1:戸籍統一文字）。</param>
        /// <param name="code">文字コード。指定したコードが存在しない場合、検索結果は０件となる。</param>
        /// <response code="200">Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を登記統一文字検索レスポンスに設定し返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/mc/toki/code.json")]
        [ValidateModelState]
        [SwaggerOperation("McTokiCodeJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CharacterTokiResponse), description: "Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を登記統一文字検索レスポンスに設定し返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult McTokiCodeJsonGet([FromQuery][Required()][Range(0, 1)]int? charset, [FromQuery][Required()][RegularExpression("^([0-9]{6}|[0-9]{1,5}(-[12])?)$")]string code)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CharacterTokiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"lastPage\" : 1,\r\n  \"unlimitedRecordCount\" : 1,\r\n  \"characterInfos\" : [ {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"unicode\" : \"0U00123F\",\r\n    \"kakusus\" : \"4\"\r\n  }, {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"unicode\" : \"0U00123F\",\r\n    \"kakusus\" : \"4\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CharacterTokiResponse>(exampleJson)
            : default(CharacterTokiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 漢字検索（登記統一文字用読み方検索）
        /// </summary>
        /// <remarks>読み方による登記統一文字の漢字文字画像検索を行う。</remarks>
        /// <param name="kakusuMargin">kakusuに指定した画数の±１画を検索対象とするかのフラグ。検索対象とする場合は“true”、検索対象としない場合は“false”を設定する。※kakusuが未設定の場合でも、必ず“true”か“false”を設定すること。</param>
        /// <param name="searchPage">検索単位数。1単位ごとに50件の検索を行う。</param>
        /// <param name="yomi1">漢字の読み方１。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomi2">漢字の読み方２。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomi3">漢字の読み方３。任意の全角ひらがなを設定する。※読み方を指定しない場合、空値を設定すること。全角ひらがな以外を設定した場合、検索結果は０件となる。</param>
        /// <param name="yomisOperant">読み方１～３の検索条件を指定する。設定可能な演算子は、“AND”又は“OR”（半角大文字）のいずれかとする。未指定の場合、“OR”を指定した場合と同様となる。</param>
        /// <param name="kakusu">漢字の画数。</param>
        /// <param name="radicalGroupCode">漢字の部首グループコード。部首グループコードについては「【付録】部首グループコード一覧」を参照</param>
        /// <response code="200">Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を登記統一文字検索レスポンスに設定し返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpGet]
        [Route("/rs/api/v1/mc/toki/yomi.json")]
        [ValidateModelState]
        [SwaggerOperation("McTokiYomiJsonGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CharacterTokiResponse), description: "Parametersから取得した各情報を元に処理を実施し、正常終了した場合、検索結果を登記統一文字検索レスポンスに設定し返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult McTokiYomiJsonGet([FromQuery][Required()]bool? kakusuMargin, [FromQuery][Required()]int? searchPage, [FromQuery]string yomi1, [FromQuery]string yomi2, [FromQuery]string yomi3, [FromQuery][RegularExpression("^AND$|^OR$")]string yomisOperant, [FromQuery][RegularExpression("^[0-9]+$")]string kakusu, [FromQuery][RegularExpression("^[0-9]{3}$")]string radicalGroupCode)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CharacterTokiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"lastPage\" : 1,\r\n  \"unlimitedRecordCount\" : 1,\r\n  \"characterInfos\" : [ {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"unicode\" : \"0U00123F\",\r\n    \"kakusus\" : \"4\"\r\n  }, {\r\n    \"repRadicalCodes\" : \"06300\",\r\n    \"yomisForSearch\" : \"と\",\r\n    \"image\" : \"image\",\r\n    \"morohashiCode\" : \"11696\",\r\n    \"kosekiCode\" : \"131800\",\r\n    \"unicode\" : \"0U00123F\",\r\n    \"kakusus\" : \"4\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CharacterTokiResponse>(exampleJson)
            : default(CharacterTokiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
