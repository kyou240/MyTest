/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Simline2.Attributes;
using Simline2.Models;

namespace Simline2.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MiscApiController : ControllerBase
    { 
        /// <summary>
        /// 物件情報確認
        /// </summary>
        /// <remarks>物件情報の確認を行う。一度に問い合わせ可能な物件情報の数は100である。 </remarks>
        /// <param name="confirmBukkenJohoRequest">物件情報確認リクエストを設定する。</param>
        /// <response code="200">リクエストより取得した物件情報とエラー発生時処理続行フラグを元に処理を実行し処理が終了した場合に、確認結果を物件情報確認レスポンスに設定し返却する。</response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/misc/confirm_bukken_joho.json")]
        [ValidateModelState]
        [SwaggerOperation("MiscConfirmBukkenJohoJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConfirmBukkenJohoResponse), description: "リクエストより取得した物件情報とエラー発生時処理続行フラグを元に処理を実行し処理が終了した場合に、確認結果を物件情報確認レスポンスに設定し返却する。")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult MiscConfirmBukkenJohoJsonPost([FromBody]ConfirmBukkenJohoRequest confirmBukkenJohoRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConfirmBukkenJohoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"confirmationErrorUmu\" : false,\r\n  \"resultCodeList\" : [ \"000\", \"000\" ],\r\n  \"systemErrorUmu\" : false\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConfirmBukkenJohoResponse>(exampleJson)
            : default(ConfirmBukkenJohoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 証明書検証
        /// </summary>
        /// <remarks>電子証明書の有効性を検証する。対応する電子証明書はX.509v3形式で、エンコーディングはDER又はPEMである。 </remarks>
        /// <param name="verifyCertificateRequest">証明書検証リクエストを設定する。</param>
        /// <response code="200">リクエストより取得した電子証明書ファイルを検証し処理が終了した場合に、その検証結果を証明書検証レスポンスに設定し返却する。 </response>
        /// <response code="400">パラメータに誤りがある場合等にリクエストエラーを返却する。 </response>
        /// <response code="401">ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 </response>
        [HttpPost]
        [Route("/rs/api/v1/misc/verify_certificate.json")]
        [ValidateModelState]
        [SwaggerOperation("MiscVerifyCertificateJsonPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(VerifyCertificateResponse), description: "リクエストより取得した電子証明書ファイルを検証し処理が終了した場合に、その検証結果を証明書検証レスポンスに設定し返却する。 ")]
        [SwaggerResponse(statusCode: 400, type: typeof(HTTP400), description: "パラメータに誤りがある場合等にリクエストエラーを返却する。 ")]
        [SwaggerResponse(statusCode: 401, type: typeof(HTTP401), description: "ユーザIDやパスワードに誤りがある場合等に認証エラーを返却する。 ")]
        public virtual IActionResult MiscVerifyCertificateJsonPost([FromBody]VerifyCertificateRequest verifyCertificateRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VerifyCertificateResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(HTTP400));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(HTTP401));
            string exampleJson = null;
            exampleJson = "{\r\n  \"authorityKeyIdentifier\" : \"KeyIdentifier: CB:EF:3D:EF:83:74:A1:A8:42:F0:3B:40:36:FA:6D:82:94:A9:27:36\",\r\n  \"certificatePolicies\" : \"certificatePolicies: certificatePolicy[0]: policyIdentifier: 0.2.440.100145.8.3.1.1.100\\npolicyQualifiers[0]: policyQualifierId: 1.3.6.1.5.5.7.2.1\\nCPS URI: xxx.xxx.xxx.xxx.xxxxxx\",\r\n  \"verifyResult\" : 0,\r\n  \"issuerAltName\" : \"directoryName: OU=テスト官職認証局,O=日本国政府,C=JP\",\r\n  \"crlDistributionPoints\" : \"DistributionPoint: directoryName: OU=TestOfficialStatusCA,O=Japanese Government,C=JP\",\r\n  \"subjectAltName\" : \"directoryName: CN=テスト用証明書０１Ｂ,OU=テスト省,O=日本国政府,C=JP\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VerifyCertificateResponse>(exampleJson)
            : default(VerifyCertificateResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
