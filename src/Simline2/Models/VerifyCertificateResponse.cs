/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 証明書検証レスポンス
    /// </summary>
    [DataContract]
    public partial class VerifyCertificateResponse : IEquatable<VerifyCertificateResponse>
    {
        /// <summary>
        /// 発行機関証明書識別子 (認証局鍵識別子)
        /// </summary>
        /// <value>発行機関証明書識別子 (認証局鍵識別子)</value>
        [DataMember(Name="authorityKeyIdentifier", EmitDefaultValue=false)]
        public string AuthorityKeyIdentifier { get; set; }

        /// <summary>
        /// 証明書ポリシー
        /// </summary>
        /// <value>証明書ポリシー</value>
        [DataMember(Name="certificatePolicies", EmitDefaultValue=false)]
        public string CertificatePolicies { get; set; }

        /// <summary>
        /// CRL配布ポイント
        /// </summary>
        /// <value>CRL配布ポイント</value>
        [DataMember(Name="crlDistributionPoints", EmitDefaultValue=false)]
        public string CrlDistributionPoints { get; set; }

        /// <summary>
        /// 発行者別名
        /// </summary>
        /// <value>発行者別名</value>
        [DataMember(Name="issuerAltName", EmitDefaultValue=false)]
        public string IssuerAltName { get; set; }

        /// <summary>
        /// 所有者 (サブジェクト) 別名
        /// </summary>
        /// <value>所有者 (サブジェクト) 別名</value>
        [DataMember(Name="subjectAltName", EmitDefaultValue=false)]
        public string SubjectAltName { get; set; }

        /// <summary>
        /// 証明書検証結果：  - 0 ・・・ 認証パスの構築が成功し検証結果が正しい場合 - 101 ・・・   認証パス構築不可の場合 - 202 ・・・   認証パス中に署名の誤った証明書が含まれる場合 - 203 ・・・   認証パス中に失効した証明書が含まれる場合 - 204 ・・・   認証パス中にPolicy MappingsがAny-Policy に設定された証明書が含まれる場合 - 205 ・・・   認証パス中にGPKIの各種制約に違反した証明書が含まれる場合 - 206 ・・・   認証パスにOCSPでのCertStatusがunknownと応答される証明書が含まれる場合 - 301 ・・・   証明書検証要求に推奨していない暗号アルゴリズムの検証対象証明書が含まれる場合 - 302 ・・・   証明書検証要求に推奨していない暗号アルゴリズムの中間証明書もしくはトラストアンカーの証明書、又は、その両方が含まれる場合 - 801 ・・・   商業登記の変更登記受付による保留中の場合 - 802 ・・・   商業登記の休止申請受付による保留中の場合 - 803 ・・・   商業登記の変更登記受付・休止申請受付による保留中の場合 - 901 ・・・   GPKIの証明書検証サーバ側で要求の受付けを拒否した場合 - 902 ・・・   GPKIの証明書検証サーバにて要求がタイムアウトとなった場合 - 903 ・・・   証明書検証サーバにてタイムアウトが発生した場合 - 999 ・・・   証明書に問題がある場合 
        /// </summary>
        /// <value>証明書検証結果：  - 0 ・・・ 認証パスの構築が成功し検証結果が正しい場合 - 101 ・・・   認証パス構築不可の場合 - 202 ・・・   認証パス中に署名の誤った証明書が含まれる場合 - 203 ・・・   認証パス中に失効した証明書が含まれる場合 - 204 ・・・   認証パス中にPolicy MappingsがAny-Policy に設定された証明書が含まれる場合 - 205 ・・・   認証パス中にGPKIの各種制約に違反した証明書が含まれる場合 - 206 ・・・   認証パスにOCSPでのCertStatusがunknownと応答される証明書が含まれる場合 - 301 ・・・   証明書検証要求に推奨していない暗号アルゴリズムの検証対象証明書が含まれる場合 - 302 ・・・   証明書検証要求に推奨していない暗号アルゴリズムの中間証明書もしくはトラストアンカーの証明書、又は、その両方が含まれる場合 - 801 ・・・   商業登記の変更登記受付による保留中の場合 - 802 ・・・   商業登記の休止申請受付による保留中の場合 - 803 ・・・   商業登記の変更登記受付・休止申請受付による保留中の場合 - 901 ・・・   GPKIの証明書検証サーバ側で要求の受付けを拒否した場合 - 902 ・・・   GPKIの証明書検証サーバにて要求がタイムアウトとなった場合 - 903 ・・・   証明書検証サーバにてタイムアウトが発生した場合 - 999 ・・・   証明書に問題がある場合 </value>
        [Required]
        [DataMember(Name="verifyResult", EmitDefaultValue=false)]
        public int VerifyResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyCertificateResponse {\n");
            sb.Append("  AuthorityKeyIdentifier: ").Append(AuthorityKeyIdentifier).Append("\n");
            sb.Append("  CertificatePolicies: ").Append(CertificatePolicies).Append("\n");
            sb.Append("  CrlDistributionPoints: ").Append(CrlDistributionPoints).Append("\n");
            sb.Append("  IssuerAltName: ").Append(IssuerAltName).Append("\n");
            sb.Append("  SubjectAltName: ").Append(SubjectAltName).Append("\n");
            sb.Append("  VerifyResult: ").Append(VerifyResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VerifyCertificateResponse)obj);
        }

        /// <summary>
        /// Returns true if VerifyCertificateResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of VerifyCertificateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyCertificateResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AuthorityKeyIdentifier == other.AuthorityKeyIdentifier ||
                    AuthorityKeyIdentifier != null &&
                    AuthorityKeyIdentifier.Equals(other.AuthorityKeyIdentifier)
                ) && 
                (
                    CertificatePolicies == other.CertificatePolicies ||
                    CertificatePolicies != null &&
                    CertificatePolicies.Equals(other.CertificatePolicies)
                ) && 
                (
                    CrlDistributionPoints == other.CrlDistributionPoints ||
                    CrlDistributionPoints != null &&
                    CrlDistributionPoints.Equals(other.CrlDistributionPoints)
                ) && 
                (
                    IssuerAltName == other.IssuerAltName ||
                    IssuerAltName != null &&
                    IssuerAltName.Equals(other.IssuerAltName)
                ) && 
                (
                    SubjectAltName == other.SubjectAltName ||
                    SubjectAltName != null &&
                    SubjectAltName.Equals(other.SubjectAltName)
                ) && 
                (
                    VerifyResult == other.VerifyResult ||
                    
                    VerifyResult.Equals(other.VerifyResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AuthorityKeyIdentifier != null)
                    hashCode = hashCode * 59 + AuthorityKeyIdentifier.GetHashCode();
                    if (CertificatePolicies != null)
                    hashCode = hashCode * 59 + CertificatePolicies.GetHashCode();
                    if (CrlDistributionPoints != null)
                    hashCode = hashCode * 59 + CrlDistributionPoints.GetHashCode();
                    if (IssuerAltName != null)
                    hashCode = hashCode * 59 + IssuerAltName.GetHashCode();
                    if (SubjectAltName != null)
                    hashCode = hashCode * 59 + SubjectAltName.GetHashCode();
                    
                    hashCode = hashCode * 59 + VerifyResult.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VerifyCertificateResponse left, VerifyCertificateResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VerifyCertificateResponse left, VerifyCertificateResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
