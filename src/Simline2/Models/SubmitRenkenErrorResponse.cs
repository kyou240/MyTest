/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 連件申請送信エラーレスポンス  パラメータに誤りがある場合等に返却する。 
    /// </summary>
    [DataContract]
    public partial class SubmitRenkenErrorResponse : IEquatable<SubmitRenkenErrorResponse>
    {
        /// <summary>
        /// HTTPステータスコード
        /// </summary>
        /// <value>HTTPステータスコード</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// エラー名称
        /// </summary>
        /// <value>エラー名称</value>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// エラーメッセージ（エラーコードに応じたエラー内容を返却する。）
        /// </summary>
        /// <value>エラーメッセージ（エラーコードに応じたエラー内容を返却する。）</value>
        [Required]
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// エラーコード：  - 1・・・添付ファイルの数が制限を超えている   - 2・・・申請データに含まれるファイルのサイズが制限を超えている   - 3・・・申請データのファイルサイズが制限を超えている   - 4・・・申請データにコンピュータ・ウィルスが含まれていた   - 5・・・連件申請のパラメータが不正   - 6・・・登記所コードの形式が不正   - 7・・・手続きが無効   - 8・・・非常時運用のため、送信された申請案件を受け付けられない   - 9・・・申請データのファイル名の長さが制限を超えている   - 10・・・index.rdf内初回申請番号が不正   - 11・・・同時申請のパラメータが不正（この処理では返却しない）   - 12・・・同時申請対象の申請データの組み合わせが不正（この処理では返却しない）   - 13・・・申請書様式が存在しないか、ファイル名が不正 
        /// </summary>
        /// <value>エラーコード：  - 1・・・添付ファイルの数が制限を超えている   - 2・・・申請データに含まれるファイルのサイズが制限を超えている   - 3・・・申請データのファイルサイズが制限を超えている   - 4・・・申請データにコンピュータ・ウィルスが含まれていた   - 5・・・連件申請のパラメータが不正   - 6・・・登記所コードの形式が不正   - 7・・・手続きが無効   - 8・・・非常時運用のため、送信された申請案件を受け付けられない   - 9・・・申請データのファイル名の長さが制限を超えている   - 10・・・index.rdf内初回申請番号が不正   - 11・・・同時申請のパラメータが不正（この処理では返却しない）   - 12・・・同時申請対象の申請データの組み合わせが不正（この処理では返却しない）   - 13・・・申請書様式が存在しないか、ファイル名が不正 </value>
        [Required]
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmitRenkenErrorResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubmitRenkenErrorResponse)obj);
        }

        /// <summary>
        /// Returns true if SubmitRenkenErrorResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SubmitRenkenErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitRenkenErrorResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubmitRenkenErrorResponse left, SubmitRenkenErrorResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubmitRenkenErrorResponse left, SubmitRenkenErrorResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
