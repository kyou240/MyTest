/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RetrieveShoriJokyoResponseResults : IEquatable<RetrieveShoriJokyoResponseResults>
    {
        /// <summary>
        /// 納付状況：    - 0 ・・・ 未登録   - 1 ・・・ 未納付   - 2 ・・・ 納付済み   - 3 ・・・ 納付期限切れ   - 4 ・・・ 納付取消済み 
        /// </summary>
        /// <value>納付状況：    - 0 ・・・ 未登録   - 1 ・・・ 未納付   - 2 ・・・ 納付済み   - 3 ・・・ 納付期限切れ   - 4 ・・・ 納付取消済み </value>
        [RegularExpression("^[0-4]$")]
        [DataMember(Name="nofuJokyo", EmitDefaultValue=false)]
        public int NofuJokyo { get; set; }

        /// <summary>
        /// 申請案件の最終更新日時
        /// </summary>
        /// <value>申請案件の最終更新日時</value>
        [Required]
        [DataMember(Name="saishuKoshinNichiji", EmitDefaultValue=false)]
        public DateTime SaishuKoshinNichiji { get; set; }

        /// <summary>
        /// 申請番号
        /// </summary>
        /// <value>申請番号</value>
        [Required]
        [RegularExpression("^[0-9]{17}$")]
        [DataMember(Name="shinseiBango", EmitDefaultValue=false)]
        public string ShinseiBango { get; set; }

        /// <summary>
        /// 処理状況:  - 20 ・・・ 到達待ち - 21 ・・・ 意思確認中 - 22 ・・・ 到達・受付待ち - 23 ・・・ 到達・受付待ち - 30 ・・・ 受付完了 - 31 ・・・ 審査中 - 32 ・・・ 処理中 - 33 ・・・ 取下中 - 40 ・・・ 審査中 (補正待ち) - 41 ・・・ 審査中 (補正中) - 42 ・・・ 審査中 (補正済み) - 49 ・・・ 審査完了 (却下) - 50 ・・・ 審査終了 - 51 ・・・ 手続終了 - 52 ・・・ 取下完了 - 53 ・・・ 中止/却下 - 54 ・・・ 失効 
        /// </summary>
        /// <value>処理状況:  - 20 ・・・ 到達待ち - 21 ・・・ 意思確認中 - 22 ・・・ 到達・受付待ち - 23 ・・・ 到達・受付待ち - 30 ・・・ 受付完了 - 31 ・・・ 審査中 - 32 ・・・ 処理中 - 33 ・・・ 取下中 - 40 ・・・ 審査中 (補正待ち) - 41 ・・・ 審査中 (補正中) - 42 ・・・ 審査中 (補正済み) - 49 ・・・ 審査完了 (却下) - 50 ・・・ 審査終了 - 51 ・・・ 手続終了 - 52 ・・・ 取下完了 - 53 ・・・ 中止/却下 - 54 ・・・ 失効 </value>
        [Required]
        [RegularExpression("^[0-9]{2}$")]
        [DataMember(Name="shoriJokyo", EmitDefaultValue=false)]
        public int ShoriJokyo { get; set; }

        /// <summary>
        /// お知らせの通数。登記識別情報通知・未失効照会の手続に対して本照会を行った場合、お知らせの通数には登記識別情報通知・未失効回答取得のお知らせは含まれない。
        /// </summary>
        /// <value>お知らせの通数。登記識別情報通知・未失効照会の手続に対して本照会を行った場合、お知らせの通数には登記識別情報通知・未失効回答取得のお知らせは含まれない。</value>
        [Required]
        [Range(0, 9999)]
        [DataMember(Name="tsusu", EmitDefaultValue=false)]
        public int Tsusu { get; set; }

        /// <summary>
        /// 受付年月日
        /// </summary>
        /// <value>受付年月日</value>
        [DataMember(Name="uketsukeNengappi", EmitDefaultValue=false)]
        public DateTime UketsukeNengappi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveShoriJokyoResponseResults {\n");
            sb.Append("  NofuJokyo: ").Append(NofuJokyo).Append("\n");
            sb.Append("  SaishuKoshinNichiji: ").Append(SaishuKoshinNichiji).Append("\n");
            sb.Append("  ShinseiBango: ").Append(ShinseiBango).Append("\n");
            sb.Append("  ShoriJokyo: ").Append(ShoriJokyo).Append("\n");
            sb.Append("  Tsusu: ").Append(Tsusu).Append("\n");
            sb.Append("  UketsukeNengappi: ").Append(UketsukeNengappi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RetrieveShoriJokyoResponseResults)obj);
        }

        /// <summary>
        /// Returns true if RetrieveShoriJokyoResponseResults instances are equal
        /// </summary>
        /// <param name="other">Instance of RetrieveShoriJokyoResponseResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveShoriJokyoResponseResults other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NofuJokyo == other.NofuJokyo ||
                    
                    NofuJokyo.Equals(other.NofuJokyo)
                ) && 
                (
                    SaishuKoshinNichiji == other.SaishuKoshinNichiji ||
                    SaishuKoshinNichiji != null &&
                    SaishuKoshinNichiji.Equals(other.SaishuKoshinNichiji)
                ) && 
                (
                    ShinseiBango == other.ShinseiBango ||
                    ShinseiBango != null &&
                    ShinseiBango.Equals(other.ShinseiBango)
                ) && 
                (
                    ShoriJokyo == other.ShoriJokyo ||
                    
                    ShoriJokyo.Equals(other.ShoriJokyo)
                ) && 
                (
                    Tsusu == other.Tsusu ||
                    
                    Tsusu.Equals(other.Tsusu)
                ) && 
                (
                    UketsukeNengappi == other.UketsukeNengappi ||
                    UketsukeNengappi != null &&
                    UketsukeNengappi.Equals(other.UketsukeNengappi)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + NofuJokyo.GetHashCode();
                    if (SaishuKoshinNichiji != null)
                    hashCode = hashCode * 59 + SaishuKoshinNichiji.GetHashCode();
                    if (ShinseiBango != null)
                    hashCode = hashCode * 59 + ShinseiBango.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShoriJokyo.GetHashCode();
                    
                    hashCode = hashCode * 59 + Tsusu.GetHashCode();
                    if (UketsukeNengappi != null)
                    hashCode = hashCode * 59 + UketsukeNengappi.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RetrieveShoriJokyoResponseResults left, RetrieveShoriJokyoResponseResults right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RetrieveShoriJokyoResponseResults left, RetrieveShoriJokyoResponseResults right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
