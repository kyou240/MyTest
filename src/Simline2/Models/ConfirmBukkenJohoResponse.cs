/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 物件情報確認レスポンス
    /// </summary>
    [DataContract]
    public partial class ConfirmBukkenJohoResponse : IEquatable<ConfirmBukkenJohoResponse>
    {
        /// <summary>
        /// 確認結果コードリスト。引数で連携された物件情報リストbukkenJohos[]の配列n番目に指定した物件情報の、確認結果コードをstring[]の配列n番目に格納して返却する。なお、１つの物件情報に対し複数の確認結果コードが存在する場合、全ての確認結果コードをカンマ（,）で連結して返却する。（例えば、確認結果コード“202”及び“203”の両方が１つの物件情報に対して存在する場合、“202,203”を返却する）。 確認結果コードの詳細については「【付録】物件情報確認レスポンス 確認結果コード一覧」を参照 
        /// </summary>
        /// <value>確認結果コードリスト。引数で連携された物件情報リストbukkenJohos[]の配列n番目に指定した物件情報の、確認結果コードをstring[]の配列n番目に格納して返却する。なお、１つの物件情報に対し複数の確認結果コードが存在する場合、全ての確認結果コードをカンマ（,）で連結して返却する。（例えば、確認結果コード“202”及び“203”の両方が１つの物件情報に対して存在する場合、“202,203”を返却する）。 確認結果コードの詳細については「【付録】物件情報確認レスポンス 確認結果コード一覧」を参照 </value>
        [Required]
        [DataMember(Name="resultCodeList", EmitDefaultValue=false)]
        public List<string> ResultCodeList { get; set; }

        /// <summary>
        /// 確認エラー有無。“000”及び“999”以外の確認結果コードが１件以上存在する場合はtrueを、存在しない場合はfalseを返却する。
        /// </summary>
        /// <value>確認エラー有無。“000”及び“999”以外の確認結果コードが１件以上存在する場合はtrueを、存在しない場合はfalseを返却する。</value>
        [Required]
        [DataMember(Name="confirmationErrorUmu", EmitDefaultValue=false)]
        public bool? ConfirmationErrorUmu { get; set; }

        /// <summary>
        /// システムエラー有無。“999”の確認結果コードが１件以上存在する場合はtrueを、存在しない場合はfalseを返却する。
        /// </summary>
        /// <value>システムエラー有無。“999”の確認結果コードが１件以上存在する場合はtrueを、存在しない場合はfalseを返却する。</value>
        [Required]
        [DataMember(Name="systemErrorUmu", EmitDefaultValue=false)]
        public bool? SystemErrorUmu { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfirmBukkenJohoResponse {\n");
            sb.Append("  ResultCodeList: ").Append(ResultCodeList).Append("\n");
            sb.Append("  ConfirmationErrorUmu: ").Append(ConfirmationErrorUmu).Append("\n");
            sb.Append("  SystemErrorUmu: ").Append(SystemErrorUmu).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfirmBukkenJohoResponse)obj);
        }

        /// <summary>
        /// Returns true if ConfirmBukkenJohoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfirmBukkenJohoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfirmBukkenJohoResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResultCodeList == other.ResultCodeList ||
                    ResultCodeList != null &&
                    other.ResultCodeList != null &&
                    ResultCodeList.SequenceEqual(other.ResultCodeList)
                ) && 
                (
                    ConfirmationErrorUmu == other.ConfirmationErrorUmu ||
                    ConfirmationErrorUmu != null &&
                    ConfirmationErrorUmu.Equals(other.ConfirmationErrorUmu)
                ) && 
                (
                    SystemErrorUmu == other.SystemErrorUmu ||
                    SystemErrorUmu != null &&
                    SystemErrorUmu.Equals(other.SystemErrorUmu)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResultCodeList != null)
                    hashCode = hashCode * 59 + ResultCodeList.GetHashCode();
                    if (ConfirmationErrorUmu != null)
                    hashCode = hashCode * 59 + ConfirmationErrorUmu.GetHashCode();
                    if (SystemErrorUmu != null)
                    hashCode = hashCode * 59 + SystemErrorUmu.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConfirmBukkenJohoResponse left, ConfirmBukkenJohoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfirmBukkenJohoResponse left, ConfirmBukkenJohoResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
