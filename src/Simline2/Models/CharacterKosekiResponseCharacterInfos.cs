/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CharacterKosekiResponseCharacterInfos : IEquatable<CharacterKosekiResponseCharacterInfos>
    {
        /// <summary>
        /// 漢字の読み。複数存在する場合は、カンマ区切り。
        /// </summary>
        /// <value>漢字の読み。複数存在する場合は、カンマ区切り。</value>
        [DataMember(Name="yomisForSearch", EmitDefaultValue=false)]
        public string YomisForSearch { get; set; }

        /// <summary>
        /// 画数。複数存在する場合は、カンマ区切り。
        /// </summary>
        /// <value>画数。複数存在する場合は、カンマ区切り。</value>
        [RegularExpression("^[0-9][,0-9]*$")]
        [DataMember(Name="kakusus", EmitDefaultValue=false)]
        public string Kakusus { get; set; }

        /// <summary>
        /// 部首コード（5桁）。複数存在する場合は、カンマ区切り。コード5桁のうち、先頭3ケタはJISの部首コード、末尾2ケタは登記・供託オンライン申請システムで保持する内部コード。部首コードを画面等で表示する場合は、先頭3桁を表示すること。
        /// </summary>
        /// <value>部首コード（5桁）。複数存在する場合は、カンマ区切り。コード5桁のうち、先頭3ケタはJISの部首コード、末尾2ケタは登記・供託オンライン申請システムで保持する内部コード。部首コードを画面等で表示する場合は、先頭3桁を表示すること。</value>
        [RegularExpression("^[0-9]{5}(,[0-9]{5})*$")]
        [DataMember(Name="repRadicalCodes", EmitDefaultValue=false)]
        public string RepRadicalCodes { get; set; }

        /// <summary>
        /// 戸籍統一文字コード
        /// </summary>
        /// <value>戸籍統一文字コード</value>
        [Required]
        [RegularExpression("^[0-9]{6}$")]
        [DataMember(Name="kosekiCode", EmitDefaultValue=false)]
        public string KosekiCode { get; set; }

        /// <summary>
        /// 諸橋大漢和辞典コード
        /// </summary>
        /// <value>諸橋大漢和辞典コード</value>
        [Required]
        [RegularExpression("^[0-9]{0,5}(-[12])?$")]
        [DataMember(Name="morohashiCode", EmitDefaultValue=false)]
        public string MorohashiCode { get; set; }

        /// <summary>
        /// 漢字文字イメージ
        /// </summary>
        /// <value>漢字文字イメージ</value>
        [Required]
        [DataMember(Name="image", EmitDefaultValue=false)]
        public byte[] Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CharacterKosekiResponseCharacterInfos {\n");
            sb.Append("  YomisForSearch: ").Append(YomisForSearch).Append("\n");
            sb.Append("  Kakusus: ").Append(Kakusus).Append("\n");
            sb.Append("  RepRadicalCodes: ").Append(RepRadicalCodes).Append("\n");
            sb.Append("  KosekiCode: ").Append(KosekiCode).Append("\n");
            sb.Append("  MorohashiCode: ").Append(MorohashiCode).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CharacterKosekiResponseCharacterInfos)obj);
        }

        /// <summary>
        /// Returns true if CharacterKosekiResponseCharacterInfos instances are equal
        /// </summary>
        /// <param name="other">Instance of CharacterKosekiResponseCharacterInfos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CharacterKosekiResponseCharacterInfos other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    YomisForSearch == other.YomisForSearch ||
                    YomisForSearch != null &&
                    YomisForSearch.Equals(other.YomisForSearch)
                ) && 
                (
                    Kakusus == other.Kakusus ||
                    Kakusus != null &&
                    Kakusus.Equals(other.Kakusus)
                ) && 
                (
                    RepRadicalCodes == other.RepRadicalCodes ||
                    RepRadicalCodes != null &&
                    RepRadicalCodes.Equals(other.RepRadicalCodes)
                ) && 
                (
                    KosekiCode == other.KosekiCode ||
                    KosekiCode != null &&
                    KosekiCode.Equals(other.KosekiCode)
                ) && 
                (
                    MorohashiCode == other.MorohashiCode ||
                    MorohashiCode != null &&
                    MorohashiCode.Equals(other.MorohashiCode)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.Equals(other.Image)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (YomisForSearch != null)
                    hashCode = hashCode * 59 + YomisForSearch.GetHashCode();
                    if (Kakusus != null)
                    hashCode = hashCode * 59 + Kakusus.GetHashCode();
                    if (RepRadicalCodes != null)
                    hashCode = hashCode * 59 + RepRadicalCodes.GetHashCode();
                    if (KosekiCode != null)
                    hashCode = hashCode * 59 + KosekiCode.GetHashCode();
                    if (MorohashiCode != null)
                    hashCode = hashCode * 59 + MorohashiCode.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CharacterKosekiResponseCharacterInfos left, CharacterKosekiResponseCharacterInfos right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CharacterKosekiResponseCharacterInfos left, CharacterKosekiResponseCharacterInfos right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
