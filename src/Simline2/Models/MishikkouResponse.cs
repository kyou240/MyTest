/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 登記識別情報通知・未失効回答取得レスポンス
    /// </summary>
    [DataContract]
    public partial class MishikkouResponse : IEquatable<MishikkouResponse>
    {
        /// <summary>
        /// お知らせ区分。常に3:未失効回答通知を返す。
        /// </summary>
        /// <value>お知らせ区分。常に3:未失効回答通知を返す。</value>
        [Required]
        [RegularExpression("^3$")]
        [DataMember(Name="oshiraseKubun", EmitDefaultValue=false)]
        public int OshiraseKubun { get; set; }

        /// <summary>
        /// お知らせ内容
        /// </summary>
        /// <value>お知らせ内容</value>
        [Required]
        [DataMember(Name="oshiraseNaiyo", EmitDefaultValue=false)]
        public string OshiraseNaiyo { get; set; }

        /// <summary>
        /// お知らせ発行日時
        /// </summary>
        /// <value>お知らせ発行日時</value>
        [Required]
        [DataMember(Name="oshiraseNichiji", EmitDefaultValue=false)]
        public DateTime OshiraseNichiji { get; set; }

        /// <summary>
        /// 添付ファイルの有無。常にfalseを返す。
        /// </summary>
        /// <value>添付ファイルの有無。常にfalseを返す。</value>
        [Required]
        [DataMember(Name="tempuFileUmu", EmitDefaultValue=false)]
        public bool TempuFileUmu { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MishikkouResponse {\n");
            sb.Append("  OshiraseKubun: ").Append(OshiraseKubun).Append("\n");
            sb.Append("  OshiraseNaiyo: ").Append(OshiraseNaiyo).Append("\n");
            sb.Append("  OshiraseNichiji: ").Append(OshiraseNichiji).Append("\n");
            sb.Append("  TempuFileUmu: ").Append(TempuFileUmu).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MishikkouResponse)obj);
        }

        /// <summary>
        /// Returns true if MishikkouResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of MishikkouResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MishikkouResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OshiraseKubun == other.OshiraseKubun ||
                    
                    OshiraseKubun.Equals(other.OshiraseKubun)
                ) && 
                (
                    OshiraseNaiyo == other.OshiraseNaiyo ||
                    OshiraseNaiyo != null &&
                    OshiraseNaiyo.Equals(other.OshiraseNaiyo)
                ) && 
                (
                    OshiraseNichiji == other.OshiraseNichiji ||
                    OshiraseNichiji != null &&
                    OshiraseNichiji.Equals(other.OshiraseNichiji)
                ) && 
                (
                    TempuFileUmu == other.TempuFileUmu ||
                    
                    TempuFileUmu.Equals(other.TempuFileUmu)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + OshiraseKubun.GetHashCode();
                    if (OshiraseNaiyo != null)
                    hashCode = hashCode * 59 + OshiraseNaiyo.GetHashCode();
                    if (OshiraseNichiji != null)
                    hashCode = hashCode * 59 + OshiraseNichiji.GetHashCode();
                    
                    hashCode = hashCode * 59 + TempuFileUmu.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MishikkouResponse left, MishikkouResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MishikkouResponse left, MishikkouResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
