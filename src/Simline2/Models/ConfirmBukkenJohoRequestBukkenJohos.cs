/*
 * 登記・供託オンライン申請システムAPI
 *
 *  本リファレンスは登記・供託オンライン申請システムAPIリファレンスとなります。  登記・供託オンライン申請システムAPIを利用することで、オンライン申請、処理状況の確認、公文書取得等を行うことができます。  本リファレンスは「API一覧」と「リクエスト・レスポンス一覧」で構成されており、それぞれ以下の内容を記しています。  ■API一覧      各APIの仕様について記しています。  ■リクエスト・レスポンス一覧      各APIのリクエスト及びレスポンスの構造や各API共通で扱う共通エラーレスポンスの構造を記しています。なお、Exampleの値はSwaggerファイルと異なる表記となる場合がありますので、別途提供するSwaggerファイルをあわせて確認してください。  共通エラーレスポンスは以下の4種類です。詳細についてはリクエスト・レスポンス一覧の内容を確認してください。    ・HTTP403（Forbidden）    ・HTTP404（Not Found）      ・HTTP500（Internal Server Error）      ・HTTP503（Service unavailable）    
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Simline2.Converters;

namespace Simline2.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConfirmBukkenJohoRequestBukkenJohos : IEquatable<ConfirmBukkenJohoRequestBukkenJohos>
    {
        /// <summary>
        /// 物件区分。手続IDが“HM0504000100001”（登記識別情報に関する証明請求書（有効証明））、“HM0504000200001”（登記識別情報に関する証明請求書（不通知・失効証明））又は“HM0504000300001”（登記識別情報通知・未失効照会）かつ物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 土地 - 2 ・・・ 建物 
        /// </summary>
        /// <value>物件区分。手続IDが“HM0504000100001”（登記識別情報に関する証明請求書（有効証明））、“HM0504000200001”（登記識別情報に関する証明請求書（不通知・失効証明））又は“HM0504000300001”（登記識別情報通知・未失効照会）かつ物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 土地 - 2 ・・・ 建物 </value>
        [DataMember(Name="bukkenKubun", EmitDefaultValue=false)]
        public string BukkenKubun { get; set; }

        /// <summary>
        /// 物件種別。手続IDの上7桁が“HM05011”（登記申請書（表示に関する登記））、“HM05012”（登記申請書（権利に関する登記））、“HM05021”（登記嘱託書（表示に関する登記））、“HM05022”（登記嘱託書（権利に関する登記））、“HM05081”（書面提出用登記申請書（表示に関する登記））、“HM05082”（書面提出用登記申請書（権利に関する登記））、“HM05091”（書面提出用登記嘱託書（表示に関する登記））又は“HM05092”（書面提出用登記嘱託書（権利に関する登記））であるか、手続IDが“offerform”（登記識別情報提供様式）の場合、かつ物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 土地 - 2 ・・・ 建物 - E ・・・ 区分建物（専有） 
        /// </summary>
        /// <value>物件種別。手続IDの上7桁が“HM05011”（登記申請書（表示に関する登記））、“HM05012”（登記申請書（権利に関する登記））、“HM05021”（登記嘱託書（表示に関する登記））、“HM05022”（登記嘱託書（権利に関する登記））、“HM05081”（書面提出用登記申請書（表示に関する登記））、“HM05082”（書面提出用登記申請書（権利に関する登記））、“HM05091”（書面提出用登記嘱託書（表示に関する登記））又は“HM05092”（書面提出用登記嘱託書（権利に関する登記））であるか、手続IDが“offerform”（登記識別情報提供様式）の場合、かつ物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 土地 - 2 ・・・ 建物 - E ・・・ 区分建物（専有） </value>
        [DataMember(Name="bukkenShubetsu", EmitDefaultValue=false)]
        public string BukkenShubetsu { get; set; }

        /// <summary>
        /// 物件状態。物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 既存 - 2 ・・・ 閉鎖 
        /// </summary>
        /// <value>物件状態。物件指定が所在の場合、必須項目。それ以外の場合は設定不可。（半角）  - 1 ・・・ 既存 - 2 ・・・ 閉鎖 </value>
        [DataMember(Name="bukkenJotai", EmitDefaultValue=false)]
        public string BukkenJotai { get; set; }

        /// <summary>
        /// 地番区域情報。物件指定が所在の場合、必須項目。物件指定が不動産番号の場合は設定不可。
        /// </summary>
        /// <value>地番区域情報。物件指定が所在の場合、必須項目。物件指定が不動産番号の場合は設定不可。</value>
        [DataMember(Name="chibanKuikiJoho", EmitDefaultValue=false)]
        public string ChibanKuikiJoho { get; set; }

        /// <summary>
        /// 地番／家屋番号情報。物件指定が所在の場合、必須項目。物件指定が不動産番号の場合は設定不可。
        /// </summary>
        /// <value>地番／家屋番号情報。物件指定が所在の場合、必須項目。物件指定が不動産番号の場合は設定不可。</value>
        [DataMember(Name="chibanKaokuBangoJoho", EmitDefaultValue=false)]
        public string ChibanKaokuBangoJoho { get; set; }

        /// <summary>
        /// 不動産番号。物件指定が不動産番号の場合、必須項目。物件指定が所在の場合は設定不可。
        /// </summary>
        /// <value>不動産番号。物件指定が不動産番号の場合、必須項目。物件指定が所在の場合は設定不可。</value>
        [RegularExpression("^[0-9]{13}$")]
        [DataMember(Name="fudosanBango", EmitDefaultValue=false)]
        public string FudosanBango { get; set; }

        /// <summary>
        /// 閉鎖年月日
        /// </summary>
        /// <value>閉鎖年月日</value>
        [DataMember(Name="heisaNengappi", EmitDefaultValue=false)]
        public string HeisaNengappi { get; set; }

        /// <summary>
        /// 登記所コード。
        /// </summary>
        /// <value>登記所コード。</value>
        [RegularExpression("^[0-9]{4}$")]
        [DataMember(Name="tokishoCode", EmitDefaultValue=false)]
        public string TokishoCode { get; set; }

        /// <summary>
        /// 手続ID
        /// </summary>
        /// <value>手続ID</value>
        [DataMember(Name="tetsuzukiID", EmitDefaultValue=false)]
        public string TetsuzukiID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfirmBukkenJohoRequestBukkenJohos {\n");
            sb.Append("  BukkenKubun: ").Append(BukkenKubun).Append("\n");
            sb.Append("  BukkenShubetsu: ").Append(BukkenShubetsu).Append("\n");
            sb.Append("  BukkenJotai: ").Append(BukkenJotai).Append("\n");
            sb.Append("  ChibanKuikiJoho: ").Append(ChibanKuikiJoho).Append("\n");
            sb.Append("  ChibanKaokuBangoJoho: ").Append(ChibanKaokuBangoJoho).Append("\n");
            sb.Append("  FudosanBango: ").Append(FudosanBango).Append("\n");
            sb.Append("  HeisaNengappi: ").Append(HeisaNengappi).Append("\n");
            sb.Append("  TokishoCode: ").Append(TokishoCode).Append("\n");
            sb.Append("  TetsuzukiID: ").Append(TetsuzukiID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfirmBukkenJohoRequestBukkenJohos)obj);
        }

        /// <summary>
        /// Returns true if ConfirmBukkenJohoRequestBukkenJohos instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfirmBukkenJohoRequestBukkenJohos to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfirmBukkenJohoRequestBukkenJohos other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BukkenKubun == other.BukkenKubun ||
                    BukkenKubun != null &&
                    BukkenKubun.Equals(other.BukkenKubun)
                ) && 
                (
                    BukkenShubetsu == other.BukkenShubetsu ||
                    BukkenShubetsu != null &&
                    BukkenShubetsu.Equals(other.BukkenShubetsu)
                ) && 
                (
                    BukkenJotai == other.BukkenJotai ||
                    BukkenJotai != null &&
                    BukkenJotai.Equals(other.BukkenJotai)
                ) && 
                (
                    ChibanKuikiJoho == other.ChibanKuikiJoho ||
                    ChibanKuikiJoho != null &&
                    ChibanKuikiJoho.Equals(other.ChibanKuikiJoho)
                ) && 
                (
                    ChibanKaokuBangoJoho == other.ChibanKaokuBangoJoho ||
                    ChibanKaokuBangoJoho != null &&
                    ChibanKaokuBangoJoho.Equals(other.ChibanKaokuBangoJoho)
                ) && 
                (
                    FudosanBango == other.FudosanBango ||
                    FudosanBango != null &&
                    FudosanBango.Equals(other.FudosanBango)
                ) && 
                (
                    HeisaNengappi == other.HeisaNengappi ||
                    HeisaNengappi != null &&
                    HeisaNengappi.Equals(other.HeisaNengappi)
                ) && 
                (
                    TokishoCode == other.TokishoCode ||
                    TokishoCode != null &&
                    TokishoCode.Equals(other.TokishoCode)
                ) && 
                (
                    TetsuzukiID == other.TetsuzukiID ||
                    TetsuzukiID != null &&
                    TetsuzukiID.Equals(other.TetsuzukiID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BukkenKubun != null)
                    hashCode = hashCode * 59 + BukkenKubun.GetHashCode();
                    if (BukkenShubetsu != null)
                    hashCode = hashCode * 59 + BukkenShubetsu.GetHashCode();
                    if (BukkenJotai != null)
                    hashCode = hashCode * 59 + BukkenJotai.GetHashCode();
                    if (ChibanKuikiJoho != null)
                    hashCode = hashCode * 59 + ChibanKuikiJoho.GetHashCode();
                    if (ChibanKaokuBangoJoho != null)
                    hashCode = hashCode * 59 + ChibanKaokuBangoJoho.GetHashCode();
                    if (FudosanBango != null)
                    hashCode = hashCode * 59 + FudosanBango.GetHashCode();
                    if (HeisaNengappi != null)
                    hashCode = hashCode * 59 + HeisaNengappi.GetHashCode();
                    if (TokishoCode != null)
                    hashCode = hashCode * 59 + TokishoCode.GetHashCode();
                    if (TetsuzukiID != null)
                    hashCode = hashCode * 59 + TetsuzukiID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConfirmBukkenJohoRequestBukkenJohos left, ConfirmBukkenJohoRequestBukkenJohos right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfirmBukkenJohoRequestBukkenJohos left, ConfirmBukkenJohoRequestBukkenJohos right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
